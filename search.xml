<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>动态规划之状压dp</title>
      <link href="/2024/04/06/%E7%8A%B6%E5%8E%8Bdp/"/>
      <url>/2024/04/06/%E7%8A%B6%E5%8E%8Bdp/</url>
      
        <content type="html"><![CDATA[<h1 id="蒙德里安的猜想"><a href="#蒙德里安的猜想" class="headerlink" title="蒙德里安的猜想"></a>蒙德里安的猜想</h1><p>求把 N×M 的棋盘分割成若干个 1×2 的长方形，有多少种方案。</p><p>例如当 N&#x3D;2，M&#x3D;4 时，共有 5 种方案。当 N&#x3D;2，M&#x3D;3 时，共有 3 种方案。</p><p><strong>输入格式</strong></p><p>输入包含多组测试用例。</p><p>每组测试用例占一行，包含两个整数 N 和 M。</p><p>当输入用例 N&#x3D;0，M&#x3D;0 时，表示输入终止，且该用例无需处理。</p><p><strong>输出格式</strong></p><p>每个测试用例输出一个结果，每个结果占一行。</p><p><strong>数据范围</strong></p><p>1≤N,M≤11</p><blockquote><p>输入样例：<br>1 2<br>1 3<br>1 4<br>2 2<br>2 3<br>2 4<br>2 11<br>4 11<br>0 0<br>输出样例：<br>1<br>0<br>1<br>2<br>3<br>5<br>144<br>51205</p></blockquote><p><img src="/img/dp1.jpg" alt="蒙德里安的梦想"></p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p><strong>数据范围为 1 ~ 11 ，考虑进行状压dp</strong></p><p>棋盘面积一定是偶数，否则不存在合法方案（本题保证一定合法）；</p><p>长方形的放置只存在横向和纵向两种方案，现只考虑横向放置长方形。当所有横向长方形防止完毕，纵向方案唯一确定。故只需考虑横向放置即可；</p><p>f[i][j] 表示前 i-1 列已经放置好，且从第 i-1 列延伸出来的 1 * 1的小正方形的排列方式为j（j看成 n 位二进制数，第 d 行存在延伸过来的小正方形，则 j 的第 d 位为1，否则为 0 ）的所有方案数；</p><p>状态转移：考虑由f[i-1][k]转移。合法的转移情况保证 j 和 k 的同一数位不能都是 1 ，否则会发生重叠；并且当第 i 列、第 i-1 列放置完后，不允许存在由连续奇数行没有横向长方形；</p><p>对应上述两种情况，保证 <strong>i &amp; k &#x3D;&#x3D; 0</strong> 且 <strong>i | k 中没有连续奇数个0</strong>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">12</span>,M = <span class="number">1</span> &lt;&lt; N;    <span class="comment">//N行，M中状态</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">bool</span> st[M]; <span class="comment">//预处理所有合法状态</span></span><br><span class="line">LL f[N][M];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(cin &gt;&gt; n &gt;&gt; m,n || m) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1</span> &lt;&lt; n; ++ i) &#123;</span><br><span class="line">            <span class="type">int</span> cnt = <span class="number">0</span>;    <span class="comment">//统计连续0</span></span><br><span class="line">            st[i] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; ++ j) </span><br><span class="line">                <span class="keyword">if</span>(i &gt;&gt; j &amp; <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(cnt &amp; <span class="number">1</span>) st[i] = <span class="literal">false</span>;  <span class="comment">//连续奇数个0，状态不合法</span></span><br><span class="line">                    cnt = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> ++ cnt;</span><br><span class="line">            <span class="keyword">if</span>(cnt &amp; <span class="number">1</span>) st[i] = <span class="literal">false</span>;  <span class="comment">//注意末尾可能存在奇数个0</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//初始化f数组</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= m; ++ i)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">1</span> &lt;&lt; n; ++ j)</span><br><span class="line">                f[i][j] = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//f[0][0]什么都没放置，仅一种方案        </span></span><br><span class="line">        f[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//枚举第i列的所有状态可以由i-1列的哪些状态转移过来</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= m; ++ i)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">1</span> &lt;&lt; n; ++ j)</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">1</span> &lt;&lt; n; ++ k)</span><br><span class="line">                    <span class="keyword">if</span>((j &amp; k) == <span class="number">0</span> &amp;&amp; st[j | k])</span><br><span class="line">                        f[i][j] += (LL)f[i<span class="number">-1</span>][k];</span><br><span class="line">        <span class="comment">//f[m][0]表示前m-1列放好，且第m列没有任何延伸。注意，数组从0开始</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,f[m][<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
